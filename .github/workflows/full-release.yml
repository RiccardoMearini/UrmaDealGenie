# Create a new GitHub release, triggered when a new release is published.
# Two release tags are created:
# - the AWS Lambda Function and this will re-use the trigering release tag
# - the Console Application will create a new release tag copies from the triggering release tag
# Plus a Docker image of the Console Application is built and pushed to Docker Hub

name: Release AWS Lambda & Console App

on:
  release:
    types: [published]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        dotnet-version: ['6.0']

    steps:
      - uses: actions/checkout@v2
      - name: Setup .NET Core SDK ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v1.7.2
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      - name: Restore dependencies
        run: |
          dotnet restore
          dotnet tool install --global Amazon.Lambda.Tools
          dotnet tool install --global Amazon.Lambda.TestTool-3.1

      # AWS Lambda Function  
      - name: Build/package AWS Lambda function
        run: dotnet lambda package UrmaDealGenieAWS-${{github.event.release.tag_name}}.zip -pl ./src/UrmaDealGenie

      - name: Create AWS Lambda release
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "${{github.event.release.tag_name}}"
          prerelease: true
          title: "Urma Deal Genie AWS Lambda - ${{github.event.release.tag_name}}"
          files: |
            UrmaDealGenieAWS-${{github.event.release.tag_name}}.zip
            ./deploy/deploy-urmadealgenie.yml
            ./src/UrmaDealGenieApp/dealrules.json
            ./src/UrmaDealGenie/.lambda-test-tool/SavedRequests/test-config-update-false.json

      # Console Applications
      - name: Build/publish console application win10-x64
        run: |
          dotnet publish ./src/UrmaDealGenieApp -c Release -o ./src/UrmaDealGenieApp/UrmaDealGenieApp-win10-x64 -p:PublishSingleFile=true --self-contained false -r win10-x64
          mv ./src/UrmaDealGenieApp/UrmaDealGenieApp-win10-x64/UrmaDealGenieApp.exe ./src/UrmaDealGenieApp/UrmaDealGenieApp-win10-x64/UrmaDealGenieApp-win10-x64.exe           

      - name: Build/publish console application osx-x64
        run: |
          dotnet publish ./src/UrmaDealGenieApp -c Release -o ./src/UrmaDealGenieApp/UrmaDealGenieApp-osx-x64 -p:PublishSingleFile=true --self-contained false -r osx-x64
          cd ./src/UrmaDealGenieApp/UrmaDealGenieApp-osx-x64
          ls
          mv ./src/UrmaDealGenieApp/UrmaDealGenieApp-osx-x64/UrmaDealGenieApp.exe ./src/UrmaDealGenieApp/UrmaDealGenieApp-osx-x64/UrmaDealGenieApp-osx-x64.exe 

      # TODO: Put architecture label in the .exe, and upload both
      - name: Create Console Application release
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "app-${{github.event.release.tag_name}}"
          prerelease: true
          title: "Urma Deal Genie Console App - ${{github.event.release.tag_name}}"
          files: |
            ./src/UrmaDealGenieApp/UrmaDealGenieApp-win10-x64/UrmaDealGenieApp-win10-x64.exe
            ./src/UrmaDealGenieApp/UrmaDealGenieApp-osx-x64/UrmaDealGenieApp-osx-x64.exe
            ./src/UrmaDealGenieApp/dealrules.json

      # Build and push Docker image containing Console Application
      # - name: Setup Docker Buildx
      #   uses: docker/setup-buildx-action@v1

      # - name: Login to DockerHub
      #   uses: docker/login-action@v1
      #   with:
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      # - name: Build and push
      #   id: docker_build
      #   uses: docker/build-push-action@v2
      #   with:
      #     context: ./src/UrmaDealGenieApp/
      #     push: true
      #     tags: urmagurd/deal-genie:${{github.event.release.tag_name}}
